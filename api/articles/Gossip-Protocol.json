{"title":"Gossip Protocol","uid":"604173b86be0a2f105a1d74293a8d4b7","slug":"Gossip-Protocol","date":"2022-07-03T05:29:44.000Z","updated":"2022-07-03T06:05:21.627Z","comments":true,"path":"api/articles/Gossip-Protocol.json","keywords":null,"cover":[],"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在大型分布式环境中，我们没有任何中央节点来跟踪所有节点以知道某个节点是否停机，一个节点如何知道其他所有节点的当前状态？要做到这一点，最简单的方法是让每个节点与其他节点保持心跳。然后，当一个节点出现故障时，它将停止发送心跳信号，其他所有人都会立即发现。但是，这意味着 $O(N^2)$ 每隔一个节拍(N)发送消息n节点总数)，这是一个高得离谱的数量，并且将消耗大量网络带宽，因此在任何大小的集群中都是不可行的。那么，有没有其他选项来监视集群的状态呢？</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>每个节点跟踪关于集群中其他节点的状态信息，并且每秒将该信息八卦（Gossip）(即，共享)给另一个随机节点。通过这种方式，最终每个节点都可以了解集群中所有其他节点的状态。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>Gossip协议是一种对等通信机制，在该机制中，节点定期交换关于自己和他们所知道的其他节点的状态信息。每个节点每秒发起一轮八卦（Gossip），以与另一个随机节点交换关于自己和其他节点的状态信息。这意味着任何状态更改最终都将通过系统传播，并且所有节点都会快速了解集群中的所有其他节点。</p>\n<p>每秒钟每台服务器与一个随机选择的服务器交换信息</p>\n<img src=\"../img/image-20220703140403758.png\" alt=\"image-20220703140403758\" style=\"zoom:50%;\" />\n\n<p>每秒钟，每台服务器都会交换它所知道的所有服务器的信息。</p>\n<img src=\"../img/image-20220703140517123.png\" alt=\"image-20220703140517123\" style=\"zoom:50%;\" />\n\n\n\n\n\n\n\n\n\n","text":"背景在大型分布式环境中，我们没有任何中央节点来跟踪所有节点以知道某个节点是否停机，一个节点如何知道其他所有节点的当前状态？要做到这一点，最简单的方法是让每个节点与其他节点保持心跳。然后，当一个节点出现故障时，它将停止发送心跳信号，其他所有人都会立即发现。但是，这意味着 $O(N^...","link":"","photos":[],"count_time":{"symbolsCount":526,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">解决方案</span></a></li></ol>","author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"故障检测","uid":"9254c5dd5c94857ab7eacd672f6ed06b","slug":"故障检测","date":"2022-07-03T06:24:41.000Z","updated":"2022-07-03T06:26:44.693Z","comments":true,"path":"api/articles/故障检测.json","keywords":null,"cover":null,"text":"背景在分布式系统中，准确地检测故障是一个很难解决的问题，因为我们不能100%肯定地说系统是否真的停机了，或者只是由于高负载、网络拥塞等原因导致响应非常慢。传统的故障检测机制，如心跳，会输出布尔值，告诉我们系统是否还活着；没有中间立场。心跳使用固定的超时，如果没有来自服务器的心跳，...","link":"","photos":[],"count_time":{"symbolsCount":523,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"ConditionalOnClass的坑","uid":"603da98ebad6deb878c273c2b1c31c67","slug":"ConditionalOnClass的坑","date":"2022-06-26T11:54:19.000Z","updated":"2022-06-26T12:00:52.046Z","comments":true,"path":"api/articles/ConditionalOnClass的坑.json","keywords":null,"cover":[],"text":" 上面的代码其实存在1个问题，就是ConditionalOnClass注解的使用其实是不正确的，声明在方法上并不能实现当HealthIndicator类不在classpath下的时候，这个Bean不生效，要想实现这个效果，必须要把它声明在类上，例如: @Configuration...","link":"","photos":[],"count_time":{"symbolsCount":673,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}