{"title":"ConditionalOnClass的坑","uid":"603da98ebad6deb878c273c2b1c31c67","slug":"ConditionalOnClass的坑","date":"2022-06-26T11:54:19.000Z","updated":"2022-06-26T12:00:52.046Z","comments":true,"path":"api/articles/ConditionalOnClass的坑.json","keywords":null,"cover":[],"content":"<img src=\"../img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_6c9c5c26-7b7c-40a8-a4fd-1b15af0c3130.png\" alt=\"企业微信截图_6c9c5c26-7b7c-40a8-a4fd-1b15af0c3130\" style=\"zoom:50%;\" />\n\n<p>上面的代码其实存在1个问题，就是<code>ConditionalOnClass</code>注解的使用其实是不正确的，声明在方法上并不能实现当<code>HealthIndicator</code>类不在classpath下的时候，这个Bean不生效，要想实现这个效果，必须要把它声明在类上，例如:</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">@Configuration\n@ConditionalOnProperty(PropertySourcesConstants.APOLLO_BOOTSTRAP_ENABLED)\n@ConditionalOnClass(HealthIndicator.class)\npublic class ApolloHealthAutoConfiguration &#123;\n\n    @Bean(&quot;apollo&quot;)\n    @ConditionalOnProperty(name &#x3D; &quot;management.health.apollo.enabled&quot;, havingValue &#x3D; &quot;true&quot;, matchIfMissing &#x3D; true)\n    public ApolloHealthIndicator apolloHealthIndicator() &#123;\n        return new ApolloHealthIndicator();\n    &#125;\n&#125;</code></pre>\n\n<p>上面这样写才是正确的。</p>\n<img src=\"../img/image-20220626200000968.png\" alt=\"image-20220626200000968\" style=\"zoom:50%;\" />\n\n<p>最后贴1个<code>ConditionalOnClass</code>类注释，上面也写了要将这个放到类上。</p>\n","text":" 上面的代码其实存在1个问题，就是ConditionalOnClass注解的使用其实是不正确的，声明在方法上并不能实现当HealthIndicator类不在classpath下的时候，这个Bean不生效，要想实现这个效果，必须要把它声明在类上，例如: @Configuration...","link":"","photos":[],"count_time":{"symbolsCount":673,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"toc":"","author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Gossip Protocol","uid":"604173b86be0a2f105a1d74293a8d4b7","slug":"Gossip-Protocol","date":"2022-07-03T05:29:44.000Z","updated":"2022-10-02T08:36:00.606Z","comments":true,"path":"api/articles/Gossip-Protocol.json","keywords":null,"cover":[],"text":"背景在大型分布式环境中，我们没有任何中央节点来跟踪所有节点以知道某个节点是否停机，一个节点如何知道其他所有节点的当前状态？要做到这一点，最简单的方法是让每个节点与其他节点保持心跳。然后，当一个节点出现故障时，它将停止发送心跳信号，其他所有人都会立即发现。但是，这意味着 $O(N^...","link":"","photos":[],"count_time":{"symbolsCount":526,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"},{"name":"分布式","slug":"分布式","count":2,"path":"api/tags/分布式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"一致性Hash","uid":"02d29d69da92d1495f7e9b3c258ba0cc","slug":"一致性Hash","date":"2022-06-19T03:15:56.000Z","updated":"2022-06-19T13:44:46.114Z","comments":true,"path":"api/articles/一致性Hash.json","keywords":null,"cover":[],"text":"背景跨一组节点分发数据的行为称为数据分区。当我们尝试分发数据时，有两个挑战： 我们如何知道特定数据将存储在哪个节点上？ 当我们添加或删除节点时，我们如何知道哪些数据将从现有节点移动到新节点？此外，当节点加入或离开时，我们如何最大限度地减少数据移动？ 一种简单的方法将使用适当的ha...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}