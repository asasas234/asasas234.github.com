{"title":"故障定位:syn_sent状态连接卡了好几个小时原因分析.md","uid":"0e7cfd3930040ef604ac0ea63529d122","slug":"syn-sent状态连接卡了好几个小时原因分析-md","date":"2023-03-03T05:24:48.000Z","updated":"2023-03-03T05:31:10.743Z","comments":true,"path":"api/articles/syn-sent状态连接卡了好几个小时原因分析-md.json","keywords":null,"cover":[],"content":"<p>这周我在pre环境重启了1个Java应用，发现起了2个小时也没起来，我通过执行如下命令定位到是启动时跟MYSQL建立连接的时候失败了</p>\n<p><img src=\"/../img/image-20230303132614929.png\" alt=\"image-20230303132614929\"></p>\n<p>联系运维，才知道，目标的数据库已经下线了，但是我比较好奇，为什么1个连接能卡这么久，它没有超时吗？</p>\n<p>今天早上看书的时候发现，tcp建立连接的时候，会启动1个叫定时重传的机制，如果发生丢包现象，会通过定时重传进行重试。</p>\n<p>我怀疑可能是这个现象导致的，于是通过执行tcpdump命令进行分析，得到如下结果</p>\n<p><img src=\"/../img/image-20230303132633809.png\" alt=\"image-20230303132633809\"></p>\n<p>可以看到，源的请求端口是会发生变化的，不同源端口直接的时间间隔在2分钟左右，由此可以得出2条结论</p>\n<ol>\n<li>源端口会发生变化，说明程序也在重试</li>\n<li>源端口没变的几次重试的间隔时间可以看出，TCP的定时重传是按秒级别指数级重试的，整个重试过程的时间全消耗完也是比较久的。</li>\n</ol>\n<p>然后既然怀疑程序也进行了重试，我通过之前对Jvm进程做的火焰图，可以看到如下信息。</p>\n<p><img src=\"/../img/image-20230303132646346.png\" alt=\"image-20230303132646346\"></p>\n<p>本着代码大概率是我们自己代码的问题，我找到了com.vipkid.vkds.pool.VkRandomBalanceStrategy#pickConnection 这个方法</p>\n<p><img src=\"/../img/image-20230303132657286.png\" alt=\"image-20230303132657286\"></p>\n<p>可以看到程序在这里面也会根据1个重试参数进行重试，并且如果走try catch块是没有打异常日志的。</p>\n<p>那这个参数值是多少呢？通过查看源码和我们的vkds的配置可以看到，都是配置的120</p>\n<p><img src=\"/../img/image-20230303132708119.png\" alt=\"image-20230303132708119\"></p>\n<p><img src=\"/../img/image-20230303132717774.png\" alt=\"image-20230303132717774\"></p>\n<p>也就是说一次tcp的连接包括定时重传要2分钟左右，程序又重试了120次，那么算下来，程序重启2个小时，没报错，也没起来，就有了说法。</p>\n","feature":true,"text":"这周我在pre环境重启了1个Java应用，发现起了2个小时也没起来，我通过执行如下命令定位到是启动时跟MYSQL建立连接的时候失败了 联系运维，才知道，目标的数据库已经下线了，但是我比较好奇，为什么1个连接能卡这么久，它没有超时吗？ 今天早上看书的时候发现，tcp建立连接的时候，...","link":"","photos":[],"count_time":{"symbolsCount":642,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"}],"toc":"","author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"java服务元空间溢出问题定位和解决","uid":"60f3c5982dc65db74614f2d3b50cbcc1","slug":"java服务元空间溢出问题定位和解决","date":"2023-03-17T11:54:42.000Z","updated":"2023-03-17T12:00:27.617Z","comments":true,"path":"api/articles/java服务元空间溢出问题定位和解决.json","keywords":null,"cover":[],"text":"背景周2的时候，业务找我，1个离线任务没跑完就停了，发现原来是pod自动重启了，查找容器重启前的日志，我发现是元空间内存溢出了: 定位问题首先我加了如下启动参数，这样我就可以观测到Java内存各区域的使用情况 -XX:NativeMemoryTracking&#x3D;summa...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"jvm","slug":"jvm","count":1,"path":"api/tags/jvm.json"},{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"helloworld","uid":"7feb1bc48352a2bd04c7a6d1cf8eb726","slug":"helloworld","date":"2023-01-04T01:23:45.000Z","updated":"2023-01-04T06:03:17.557Z","comments":true,"path":"api/articles/helloworld.json","keywords":null,"cover":null,"text":"这是我们的 Golang 教程系列中的第二个教程。请阅读我们之前的教程GoLang介绍和安装以了解什么是 Golang 以及如何安装 Golang。 本教程适用于 Go 1.13 或更高版本。如果您使用的是旧版本，请访问 https://golangbot.com/hello-w...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang基础教程翻译","slug":"golang基础教程翻译","count":2,"path":"api/tags/golang基础教程翻译.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}