{"title":"Maven多模块统一管理版本","uid":"957c5556bfb48cc069f3d5abcb598019","slug":"Maven多模块统一管理版本","date":"2022-05-14T05:27:00.000Z","updated":"2022-05-14T06:00:29.061Z","comments":true,"path":"api/articles/Maven多模块统一管理版本.json","keywords":null,"cover":null,"content":"<p>之前写多模块项目的时候，一般都需要保证各模块的版本号是一致的，所以导致每次代码有变动需要升级版本的时候，都需要全局挨个替换，但是这种方式太麻烦，也不够优雅，由于最近工作是维护公司的apollo，所以我看了下apollo的pom文件里的方式，觉得还不错。</p>\n<p>首先是要在多模块项目里的父pom上，做如下配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;\n&lt;artifactId&gt;demo-mulitmodule-release-plugin&lt;&#x2F;artifactId&gt;\n&lt;version&gt;$&#123;reversion&#125;&lt;&#x2F;version&gt;\n&lt;packaging&gt;pom&lt;&#x2F;packaging&gt;\n&lt;properties&gt;\n\t&lt;reversion&gt;0.0.1-SNAPSHOT&lt;&#x2F;reversion&gt;\n&lt;&#x2F;properties&gt;</code></pre>\n\n<p>为了精简，以上我只贴了相关的配置，<code>packaging</code> 是写死的，必须是<code>pom</code>,version要通过properties设置属性引用的方式，这样方便在后续子pom里通过同样的方式去引用，这样后续版本变化只改这里就可以了。<code>groupId</code>和<code>artifactId</code> 写自己的就行，这里只是为了合后面子pom的配置保持上下文一致。</p>\n<p>然后子pom的相关配置如下:</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">&lt;parent&gt;\n\t&lt;groupId&gt;com.example&lt;&#x2F;groupId&gt;\n\t&lt;artifactId&gt;demo-mulitmodule-release-plugin&lt;&#x2F;artifactId&gt;\n\t&lt;version&gt;$&#123;reversion&#125;&lt;&#x2F;version&gt;\n\t&lt;relativePath&gt;..&#x2F;pom.xml&lt;&#x2F;relativePath&gt;\n&lt;&#x2F;parent&gt;</code></pre>\n\n<p>上面配置就是明确子pom继承了前面的父pom，并通过<code>$&#123;reversion&#125;</code>实现父pom版本号的引用和<code>relativePath</code>的设置来定位父pom文件的位置。</p>\n","text":"之前写多模块项目的时候，一般都需要保证各模块的版本号是一致的，所以导致每次代码有变动需要升级版本的时候，都需要全局挨个替换，但是这种方式太麻烦，也不够优雅，由于最近工作是维护公司的apollo，所以我看了下apollo的pom文件里的方式，觉得还不错。 首先是要在多模块项目里的父...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"maven","slug":"maven","count":1,"path":"api/tags/maven.json"}],"toc":"","author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RocketMQ-NameServer的源码阅读脉络","uid":"7a8ccfb903ca33a7195e4b4486061453","slug":"RocketMQ-NameServer的源码阅读脉络","date":"2022-05-15T04:00:02.000Z","updated":"2022-05-15T06:57:44.929Z","comments":true,"path":"api/articles/RocketMQ-NameServer的源码阅读脉络.json","keywords":null,"cover":null,"text":"启动大概流程 NamesrvStartup 是启动类，会先调createNamesrvController 初始化配置，然后创建NamesrvController, 然后调Controller的静态start方法 NamesrvController的静态Start方法会先调ini...","link":"","photos":[],"count_time":{"symbolsCount":739,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"RocketMQ","slug":"RocketMQ","count":1,"path":"api/tags/RocketMQ.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}