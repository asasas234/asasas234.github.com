{"title":"helloworld","uid":"7feb1bc48352a2bd04c7a6d1cf8eb726","slug":"helloworld","date":"2023-01-04T01:23:45.000Z","updated":"2023-01-04T06:03:17.557Z","comments":true,"path":"api/articles/helloworld.json","keywords":null,"cover":null,"content":"<p>这是我们的 Golang 教程系列中的第二个教程。请阅读我们之前的教程<a href=\"GoLang%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85\">GoLang介绍和安装</a>以了解什么是 Golang 以及如何安装 Golang。</p>\n<p>本教程适用于 Go 1.13 或更高版本。如果您使用的是旧版本，请访问 <a href=\"https://golangbot.com/hello-world/%E3%80%82\">https://golangbot.com/hello-world/。</a></p>\n<p>学习编程语言没有比动手编写代码更好的方法了。让我们继续编写我们的第一个 Go 程序。</p>\n<h2 id=\"设置开发环境\"><a href=\"#设置开发环境\" class=\"headerlink\" title=\"设置开发环境\"></a>设置开发环境</h2><p>让我们创建一个目录，我们要在其中编写我们的 hello world 程序。打开终端并运行以下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkdir ~&#x2F;Documents&#x2F;learngo&#x2F;  </code></pre>\n\n<p>上述命令将在当前用户的Documents目录下创建一个名为learngo的目录。请随意在你希望代码所在的地方创建该目录。</p>\n<h2 id=\"创建一个-Go-模块\"><a href=\"#创建一个-Go-模块\" class=\"headerlink\" title=\"创建一个 Go 模块\"></a>创建一个 Go 模块</h2><p>Go 模块用于跟踪我们应用程序的依赖项及其版本。下一步是在 <code>~/Documents/learngo/</code> 文件夹中创建一个名为 <code>learngo</code> 的 go 模块。</p>\n<p>在 <code>~/Documents/learngo/</code> 目录中运行 <code>go mod init learngo</code>。这将创建一个名为 <code>go.mod</code> 的文件。该文件的内容如下所示。</p>\n<pre class=\"line-numbers language-mod\" data-language=\"mod\"><code class=\"language-mod\">module learngo\n\ngo 1.19</code></pre>\n\n<p>第一行 <code>module learngo</code> 指定模块名称。下一行<code>go 1.19</code>表示本模块中的文件使用go版本<code>1.19</code></p>\n<p>当我们了解包时，我们将更详细地讨论 Go 模块。</p>\n<h2 id=\"HelloWorld\"><a href=\"#HelloWorld\" class=\"headerlink\" title=\"HelloWorld\"></a>HelloWorld</h2><p>使用您最喜欢的文本编辑器在 <code>learngo</code> 目录中创建一个名为 <code>main.go</code> 的文件，其中包含以下内容。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main\n\nimport &quot;fmt&quot;\n\nfunc main() &#123;\n\tfmt.Println(&quot;Hello, World!&quot;)\n&#125;</code></pre>\n\n<p>Go 中的约定是将包含 <code>main</code> 函数的文件命名为 <code>main.go</code>，但其他名称也可以。</p>\n<h2 id=\"运行go程序\"><a href=\"#运行go程序\" class=\"headerlink\" title=\"运行go程序\"></a>运行go程序</h2><p>有几种不同的方式来运行 Go 程序。让我们一一看看。</p>\n<h3 id=\"1-go-install\"><a href=\"#1-go-install\" class=\"headerlink\" title=\"1. go install\"></a>1. go install</h3><p>运行 Go 程序的第一种方法是使用 <code>go install</code> 命令。<br>让我们 <code>cd</code> 进入我们刚刚创建的 <code>learngo</code> 目录。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd ~&#x2F;Documents&#x2F;learngo&#x2F;  </code></pre>\n\n<p>接下来运行以下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go install  </code></pre>\n\n<p>上面的命令将编译程序并将二进制文件安装（复制）到位置 <code>~/go/bin</code>。二进制文件的名称将是 go 模块的名称。在我们的例子中，它将被命名为 learngo。</p>\n<p>当您尝试<code>install</code>时，您可能会遇到以下错误。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go install: no install location for directory &#x2F;home&#x2F;naveen&#x2F;Documents&#x2F;learngo outside GOPATH  \nFor more details see: &#39;go help gopath&#39;  </code></pre>\n\n<p>上面错误的意思其实是，<code>go install</code> 无法找到安装编译好的二进制文件的位置。所以让我们继续并给它一个位置。此位置由 <code>GOBIN</code> 环境变量控制。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">export GOBIN&#x3D;~&#x2F;go&#x2F;bin&#x2F;  </code></pre>\n\n<p>上面的命令指定<code>go install</code>应该将编译好的二进制文件复制到路径<code>~/go/bin/</code>。这是 Go 二进制文件的常规位置，但您可以随意将其更改为您想要的任何位置。现在尝试再次运行 <code>go install</code>，程序应该可以正常编译和运行。</p>\n<p>你可以在终端输入 <code>ls -al ~/go/bin/learngo</code> 可以发现其实 <code>go install</code> 已经把二进制文件放在了路径 <code>~/go/bin</code></p>\n<p>现在让我们运行编译后的二进制文件。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">~&#x2F;go&#x2F;bin&#x2F;learngo</code></pre>\n\n<p>上面的命令将运行 <code>learngo</code> 二进制文件并打印以下输出。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello, World!</code></pre>\n\n<p>恭喜！您已经成功运行了您的第一个 Go 程序。</p>\n<p>如果您想避免在每次运行程序时都键入整个路径 <code>~/go/bin/learngo</code>，您可以将 ~&#x2F;go&#x2F;bin&#x2F; 添加到您的 PATH 中。</p>\n<p>现在您只需在终端中输入 <code>learngo</code> 即可运行该程序。</p>\n<p>您可能想知道当 <code>learngo</code> 目录包含多个 go 文件而不仅仅是 <code>main.go</code> 时会发生什么。在这种情况下 <code>go install</code> 将如何工作？请稍等，我们在学习 packages 和 go modules 的时候再讨论这些。</p>\n<h3 id=\"2-go-build\"><a href=\"#2-go-build\" class=\"headerlink\" title=\"2. go build\"></a>2. go build</h3><p>运行该程序的第二个选项是使用 <code>go build</code>。 <code>go build</code> 与 <code>go install</code> 非常相似，只是它不会将编译后的二进制文件安装（复制）到路径 <code>~/go/bin/</code>，而是在执行 <code>go build</code> 的位置创建二进制文件。</p>\n<p>在终端中输入以下命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">cd ~&#x2F;Documents&#x2F;learngo&#x2F; </code></pre>\n\n<p>将当前目录更改为 <code>learngo</code>。</p>\n<p>之后，输入以下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go build  </code></pre>\n\n<p>上面的命令将在当前目录中创建一个名为 <code>learngo</code> 的二进制文件。 <code>ls -al</code> 将显示创建了一个名为 <code>learngo</code> 的文件。</p>\n<p>输入 <code>./learngo</code> 运行程序。这也将打印</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello, World! </code></pre>\n\n<p>我们也成功地使用 <code>go build</code> 运行了我们的第一个 Go 程序 :)</p>\n<h3 id=\"3-go-run\"><a href=\"#3-go-run\" class=\"headerlink\" title=\"3. go run\"></a>3. go run</h3><p>第三种运行程序的方法是使用 <code>go run</code> 命令。</p>\n<p>在终端中输入命令 <code>cd ~/Documents/learngo/</code> 将当前目录更改为 <code>learngo</code>。</p>\n<p>之后，输入以下命令。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go run main.go  </code></pre>\n\n<p>输入上面的命令后，我们可以看到输出</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Hello, World!</code></pre>\n\n<p><code>go run</code> 和 <code>go build/go install</code> 命令之间的一个细微差别是，<code>go run</code> 需要 .go 文件的名称作为参数。</p>\n<p>在幕后，<code>go run</code> 的工作方式与 <code>go build</code> 非常相似。但它不是将程序编译并安装到当前目录，而是将文件编译到临时位置并从该位置运行文件。如果您有兴趣知道 <code>go run</code> 将文件编译到的位置，请使用 <code>--work</code> 参数运行 <code>go run</code>。</p>\n<p>在我的案例输出中运行上面的命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">WORK&#x3D;&#x2F;var&#x2F;folders&#x2F;vk&#x2F;vwyyshfj6pn1vm18ptk3fqw80000gn&#x2F;T&#x2F;go-build3075356692\nHello, World!</code></pre>\n\n<p>WORK 键的值指定程序将被编译到的临时位置。</p>\n<p>就我而言，该程序已编译到位置 <code>/var/folders/vk/vwyyshfj6pn1vm18ptk3fqw80000gn/T/go-build3075356692/b001/exe</code>。这可能因您的情况而异:)</p>\n<h3 id=\"4-Go-Playground\"><a href=\"#4-Go-Playground\" class=\"headerlink\" title=\"4.  Go Playground\"></a>4.  Go Playground</h3><p>最后一种运行程序的方法是使用 Go playground。尽管这有一些限制，但当我们想运行简单程序时，这种方法非常方便，因为它使用浏览器并且不需要在本地安装 Go:)。我已经为 hello world 程序创建了一个 playground。点击<a href=\"https://go.dev/play/p/oXGayDtoLPh\">这里</a>在线运行程序。</p>\n<p>您还可以使用 go playground 与他人共享您的源代码。</p>\n<p>既然我们知道了 4 种不同的程序运行方式，您可能会在决定使用哪种方法时感到困惑。答案是，这取决于。当我想快速检查逻辑或了解标准库函数的工作原理时，我通常会使用 <a href=\"https://go.dev/play/p/oXGayDtoLPh\">playground</a>。在大多数其他情况下，我更喜欢 <code>go install</code> 因为它让我可以选择从终端中的任何目录运行程序，因为它将所有程序编译到标准 <code>~/go/bin/</code> 路径。</p>\n<h3 id=\"HelloWorld程序简短解释\"><a href=\"#HelloWorld程序简短解释\" class=\"headerlink\" title=\"HelloWorld程序简短解释\"></a>HelloWorld程序简短解释</h3><p>这是我们刚刚编写的 hello world 程序</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">package main \n\nimport &quot;fmt&quot; \n\nfunc main() &#123;  \n    fmt.Println(&quot;Hello World&quot;) \n&#125;</code></pre>\n\n<p>我们将简要讨论程序的每一行的作用。在接下来的教程中，我们将深入探讨程序的每个部分。</p>\n<p><strong>package main</strong> - <strong>每个 go 文件都必须以<code>package name</code>开头。</strong> 包用于提供代码划分和可重用性。这里使用包名 <code>main</code>。 <code>main</code> 函数应该始终驻留在 <code>main</code> 包中。</p>\n<p><strong>import “fmt”</strong> - <code>import</code> 语句用于导入其他包。在我们的例子中，导入了 <code>fmt</code> 包，它将在 <code>main</code> 函数中使用，将文本打印到标准输出。</p>\n<p><strong>func main()</strong>  - <code>func</code> 关键字标记函数的开始。 <code>main</code> 是一个特殊的函数。程序执行从<code>main</code>函数开始。 { 和 } 大括号表示主函数的开始和结束。</p>\n<p><strong>fmt.Println(“Hello World”)</strong> - <code>fmt</code> 包的 <code>Println</code> 函数用于将文本写入标准输出。 <code>package.Function()</code> 是调用包中函数的语法。</p>\n<p>代码可以在 github <a href=\"https://github.com/golangbot/hello\">下载</a>。</p>\n<p>您现在可以继续学习 Golang 教程第 3 部分：变量以了解 Go 中的变量。</p>\n","feature":true,"text":"这是我们的 Golang 教程系列中的第二个教程。请阅读我们之前的教程GoLang介绍和安装以了解什么是 Golang 以及如何安装 Golang。 本教程适用于 Go 1.13 或更高版本。如果您使用的是旧版本，请访问 https://golangbot.com/hello-w...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang基础教程翻译","slug":"golang基础教程翻译","count":2,"path":"api/tags/golang基础教程翻译.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">设置开发环境</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-Go-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">创建一个 Go 模块</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#HelloWorld\"><span class=\"toc-text\">HelloWorld</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8Cgo%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">运行go程序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-go-install\"><span class=\"toc-text\">1. go install</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-go-build\"><span class=\"toc-text\">2. go build</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-go-run\"><span class=\"toc-text\">3. go run</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Go-Playground\"><span class=\"toc-text\">4.  Go Playground</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#HelloWorld%E7%A8%8B%E5%BA%8F%E7%AE%80%E7%9F%AD%E8%A7%A3%E9%87%8A\"><span class=\"toc-text\">HelloWorld程序简短解释</span></a></li></ol></li></ol>","author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"GoLang介绍与安装","uid":"90f1e8e7e7d3685880af5dfa3ff2eff7","slug":"GoLang介绍与安装","date":"2023-01-03T12:04:08.000Z","updated":"2023-01-03T13:00:43.285Z","comments":true,"path":"api/articles/GoLang介绍与安装.json","keywords":null,"cover":null,"text":"这是我们的 Golang 教程系列中的第一篇教程。本教程介绍了 Go，还讨论了选择 Go 相对于其他编程语言的优势。我们还将学习如何在 Mac OS、Windows 和 Linux 中安装 Go。 介绍Go 也称为 Golang，是一种由 Google 开发的开源、编译型和静态类...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"golang基础教程翻译","slug":"golang基础教程翻译","count":2,"path":"api/tags/golang基础教程翻译.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}