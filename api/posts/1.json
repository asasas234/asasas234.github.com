{"total":25,"pageSize":12,"pageCount":3,"data":[{"title":"java服务元空间溢出问题定位和解决","uid":"60f3c5982dc65db74614f2d3b50cbcc1","slug":"java服务元空间溢出问题定位和解决","date":"2023-03-17T11:54:42.000Z","updated":"2023-03-17T12:00:27.617Z","comments":true,"path":"api/articles/java服务元空间溢出问题定位和解决.json","cover":[],"text":"背景周2的时候，业务找我，1个离线任务没跑完就停了，发现原来是pod自动重启了，查找容器重启前的日志，我发现是元空间内存溢出了: 定位问题首先我加了如下启动参数，这样我就可以观测到Java内存各区域的使用情况 -XX:NativeMemoryTracking&#x3D;summa...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"jvm","slug":"jvm","count":1,"path":"api/tags/jvm.json"},{"name":"java","slug":"java","count":1,"path":"api/tags/java.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"故障定位:syn_sent状态连接卡了好几个小时原因分析.md","uid":"0e7cfd3930040ef604ac0ea63529d122","slug":"syn-sent状态连接卡了好几个小时原因分析-md","date":"2023-03-03T05:24:48.000Z","updated":"2023-03-03T05:31:10.743Z","comments":true,"path":"api/articles/syn-sent状态连接卡了好几个小时原因分析-md.json","cover":[],"text":"这周我在pre环境重启了1个Java应用，发现起了2个小时也没起来，我通过执行如下命令定位到是启动时跟MYSQL建立连接的时候失败了 联系运维，才知道，目标的数据库已经下线了，但是我比较好奇，为什么1个连接能卡这么久，它没有超时吗？ 今天早上看书的时候发现，tcp建立连接的时候，...","link":"","photos":[],"count_time":{"symbolsCount":642,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"linux","slug":"linux","count":2,"path":"api/tags/linux.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"helloworld","uid":"7feb1bc48352a2bd04c7a6d1cf8eb726","slug":"helloworld","date":"2023-01-04T01:23:45.000Z","updated":"2023-01-04T06:03:17.557Z","comments":true,"path":"api/articles/helloworld.json","cover":null,"text":"这是我们的 Golang 教程系列中的第二个教程。请阅读我们之前的教程GoLang介绍和安装以了解什么是 Golang 以及如何安装 Golang。 本教程适用于 Go 1.13 或更高版本。如果您使用的是旧版本，请访问 https://golangbot.com/hello-w...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"golang基础教程翻译","slug":"golang基础教程翻译","count":2,"path":"api/tags/golang基础教程翻译.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"GoLang介绍与安装","uid":"90f1e8e7e7d3685880af5dfa3ff2eff7","slug":"GoLang介绍与安装","date":"2023-01-03T12:04:08.000Z","updated":"2023-01-03T13:00:43.285Z","comments":true,"path":"api/articles/GoLang介绍与安装.json","cover":null,"text":"这是我们的 Golang 教程系列中的第一篇教程。本教程介绍了 Go，还讨论了选择 Go 相对于其他编程语言的优势。我们还将学习如何在 Mac OS、Windows 和 Linux 中安装 Go。 介绍Go 也称为 Golang，是一种由 Google 开发的开源、编译型和静态类...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"golang基础教程翻译","slug":"golang基础教程翻译","count":2,"path":"api/tags/golang基础教程翻译.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"介绍红黑树","uid":"d7ce011fd2434eab0f67698b6d1bed31","slug":"介绍红黑树","date":"2022-09-24T07:31:24.000Z","updated":"2022-09-25T01:39:20.722Z","comments":true,"path":"api/articles/介绍红黑树.json","cover":[],"text":"1. 介绍在本文中，我们将了解什么是红黑树，以及为什么它们是如此流行的数据结构。 我们将从查看二叉搜索树和2-3棵树开始。从这里，我们将看到红黑树如何被认为是平衡2-3树的不同代表。 本文的目的是以一种简单的方式解释红黑树，因此我们不会深入研究所有可能的插入和删除情况的代码示例或...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"算法","slug":"算法","count":1,"path":"api/tags/算法.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"async-profiler指南","uid":"db45217419a12dfdde75d94a88900ee9","slug":"async-profiler指南","date":"2022-09-18T02:13:39.000Z","updated":"2022-09-18T03:32:47.520Z","comments":true,"path":"api/articles/async-profiler指南.json","cover":[],"text":"1. 概述Java Sampling Profilers 通常使用JVM工具接口(JVMTI)进行设计，并在安全点收集堆栈跟踪。因此，这些采样剖析器可能会受到安全点偏差问题的影响。 对于应用程序的整体视图，我们需要一个采样分析器，它不需要线程位于安全点，并且可以随时收集堆栈跟踪，...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JVM","slug":"JVM","count":2,"path":"api/tags/JVM.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MySQL快速导入数据","uid":"a6af7b290f5171db5db2fabe49e62533","slug":"MySQL快速导入数据","date":"2022-07-22T07:30:59.000Z","updated":"2022-07-22T07:56:17.659Z","comments":true,"path":"api/articles/MySQL快速导入数据.json","cover":null,"text":"由于公司内网到测试环境网速太慢，所以当导大批量数据的时候，如果直接通过本地GUI工具去导入，速度会很慢，这个时候可以直接登录到测试环境MYSQL的服务器上，通过命令进行导入就会很快，因为省去了数据文件传输的步骤（运维提前帮忙传好） LOAD DATA LOCAL INFILE &...","link":"","photos":[],"count_time":{"symbolsCount":465,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"mysql","slug":"mysql","count":2,"path":"api/tags/mysql.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"从MySQL导出数据到Clickhouse","uid":"4f77ff7005cc894f0fb8ca8b1f9e018f","slug":"从MySQL导出数据到Clickhouse","date":"2022-07-03T07:46:27.000Z","updated":"2022-07-03T08:27:03.963Z","comments":true,"path":"api/articles/从MySQL导出数据到Clickhouse.json","cover":null,"text":"最开始我用的笨办法，先把MYSQL数据导出成CSV格式，在用图形化的方式导入，发现速度特别慢，原因是因为公司本机的网络到公司的测试环境服务器的网络延迟特别高，而这种办法需要来回传送大量的数据。 后来我网上查到一种方法，只需要执行1条SQL，就可以直接把MYSQL的数据写入到CK里...","link":"","photos":[],"count_time":{"symbolsCount":316,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"clickhouse","slug":"clickhouse","count":1,"path":"api/tags/clickhouse.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"脑裂","uid":"5c47efdc17eed2217ef995cf017168a8","slug":"脑裂","date":"2022-07-03T06:27:45.000Z","updated":"2022-10-02T08:36:26.156Z","comments":true,"path":"api/articles/脑裂.json","cover":null,"text":"背景在具有中央(或领导)服务器的分布式环境中，如果中央服务器死机，系统必须迅速找到替代服务器，否则，系统可能会迅速恶化。 其中一个问题是，我们不能真正知道领导者是否已经永久停止，或者是否经历了间歇性故障，如停止世界GC暂停或临时网络中断。然而，集群必须继续前进，并挑选一个新的领导...","link":"","photos":[],"count_time":{"symbolsCount":576,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"},{"name":"分布式","slug":"分布式","count":2,"path":"api/tags/分布式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"故障检测","uid":"9254c5dd5c94857ab7eacd672f6ed06b","slug":"故障检测","date":"2022-07-03T06:24:41.000Z","updated":"2022-09-18T02:18:26.264Z","comments":true,"path":"api/articles/故障检测.json","cover":null,"text":"背景在分布式系统中，准确地检测故障是一个很难解决的问题，因为我们不能100%肯定地说系统是否真的停机了，或者只是由于高负载、网络拥塞等原因导致响应非常慢。传统的故障检测机制，如心跳，会输出布尔值，告诉我们系统是否还活着；没有中间立场。心跳使用固定的超时，如果没有来自服务器的心跳，...","link":"","photos":[],"count_time":{"symbolsCount":523,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Gossip Protocol","uid":"604173b86be0a2f105a1d74293a8d4b7","slug":"Gossip-Protocol","date":"2022-07-03T05:29:44.000Z","updated":"2022-10-02T08:36:00.606Z","comments":true,"path":"api/articles/Gossip-Protocol.json","cover":[],"text":"背景在大型分布式环境中，我们没有任何中央节点来跟踪所有节点以知道某个节点是否停机，一个节点如何知道其他所有节点的当前状态？要做到这一点，最简单的方法是让每个节点与其他节点保持心跳。然后，当一个节点出现故障时，它将停止发送心跳信号，其他所有人都会立即发现。但是，这意味着 $O(N^...","link":"","photos":[],"count_time":{"symbolsCount":526,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"},{"name":"分布式","slug":"分布式","count":2,"path":"api/tags/分布式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ConditionalOnClass的坑","uid":"603da98ebad6deb878c273c2b1c31c67","slug":"ConditionalOnClass的坑","date":"2022-06-26T11:54:19.000Z","updated":"2022-06-26T12:00:52.046Z","comments":true,"path":"api/articles/ConditionalOnClass的坑.json","cover":[],"text":" 上面的代码其实存在1个问题，就是ConditionalOnClass注解的使用其实是不正确的，声明在方法上并不能实现当HealthIndicator类不在classpath下的时候，这个Bean不生效，要想实现这个效果，必须要把它声明在类上，例如: @Configuration...","link":"","photos":[],"count_time":{"symbolsCount":673,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}