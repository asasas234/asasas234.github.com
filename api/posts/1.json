{"total":19,"pageSize":12,"pageCount":2,"data":[{"title":"MySQL快速导入数据.md","uid":"cf763787dfc86ee0e54acdf9c4d2cc3d","slug":"MySQL快速导入数据-md","date":"2022-07-22T07:30:59.000Z","updated":"2022-07-22T07:41:33.748Z","comments":true,"path":"api/articles/MySQL快速导入数据-md.json","cover":null,"text":"由于公司内网到测试环境网速太慢，所以当导大批量数据的时候，如果直接通过本地GUI工具去导入，速度会很慢，这个时候可以直接登录到测试环境MYSQL的服务器上，通过命令进行导入就会很快，因为省去了数据文件传输的步骤（运维提前帮忙传好） LOAD DATA LOCAL INFILE &...","link":"","photos":[],"count_time":{"symbolsCount":465,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"mysql","slug":"mysql","count":2,"path":"api/tags/mysql.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"从MySQL导出数据到Clickhouse","uid":"4f77ff7005cc894f0fb8ca8b1f9e018f","slug":"从MySQL导出数据到Clickhouse","date":"2022-07-03T07:46:27.000Z","updated":"2022-07-03T08:27:03.963Z","comments":true,"path":"api/articles/从MySQL导出数据到Clickhouse.json","cover":null,"text":"最开始我用的笨办法，先把MYSQL数据导出成CSV格式，在用图形化的方式导入，发现速度特别慢，原因是因为公司本机的网络到公司的测试环境服务器的网络延迟特别高，而这种办法需要来回传送大量的数据。 后来我网上查到一种方法，只需要执行1条SQL，就可以直接把MYSQL的数据写入到CK里...","link":"","photos":[],"count_time":{"symbolsCount":316,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"clickhouse","slug":"clickhouse","count":1,"path":"api/tags/clickhouse.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"脑裂","uid":"5c47efdc17eed2217ef995cf017168a8","slug":"脑裂","date":"2022-07-03T06:27:45.000Z","updated":"2022-07-03T06:32:13.105Z","comments":true,"path":"api/articles/脑裂.json","cover":null,"text":"背景在具有中央(或领导)服务器的分布式环境中，如果中央服务器死机，系统必须迅速找到替代服务器，否则，系统可能会迅速恶化。 其中一个问题是，我们不能真正知道领导者是否已经永久停止，或者是否经历了间歇性故障，如停止世界GC暂停或临时网络中断。然而，集群必须继续前进，并挑选一个新的领导...","link":"","photos":[],"count_time":{"symbolsCount":576,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"故障检测","uid":"9254c5dd5c94857ab7eacd672f6ed06b","slug":"故障检测","date":"2022-07-03T06:24:41.000Z","updated":"2022-07-03T06:26:44.693Z","comments":true,"path":"api/articles/故障检测.json","cover":null,"text":"背景在分布式系统中，准确地检测故障是一个很难解决的问题，因为我们不能100%肯定地说系统是否真的停机了，或者只是由于高负载、网络拥塞等原因导致响应非常慢。传统的故障检测机制，如心跳，会输出布尔值，告诉我们系统是否还活着；没有中间立场。心跳使用固定的超时，如果没有来自服务器的心跳，...","link":"","photos":[],"count_time":{"symbolsCount":523,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Gossip Protocol","uid":"604173b86be0a2f105a1d74293a8d4b7","slug":"Gossip-Protocol","date":"2022-07-03T05:29:44.000Z","updated":"2022-07-03T06:05:21.627Z","comments":true,"path":"api/articles/Gossip-Protocol.json","cover":[],"text":"背景在大型分布式环境中，我们没有任何中央节点来跟踪所有节点以知道某个节点是否停机，一个节点如何知道其他所有节点的当前状态？要做到这一点，最简单的方法是让每个节点与其他节点保持心跳。然后，当一个节点出现故障时，它将停止发送心跳信号，其他所有人都会立即发现。但是，这意味着 $O(N^...","link":"","photos":[],"count_time":{"symbolsCount":526,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"ConditionalOnClass的坑","uid":"603da98ebad6deb878c273c2b1c31c67","slug":"ConditionalOnClass的坑","date":"2022-06-26T11:54:19.000Z","updated":"2022-06-26T12:00:52.046Z","comments":true,"path":"api/articles/ConditionalOnClass的坑.json","cover":[],"text":" 上面的代码其实存在1个问题，就是ConditionalOnClass注解的使用其实是不正确的，声明在方法上并不能实现当HealthIndicator类不在classpath下的时候，这个Bean不生效，要想实现这个效果，必须要把它声明在类上，例如: @Configuration...","link":"","photos":[],"count_time":{"symbolsCount":673,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"一致性Hash","uid":"02d29d69da92d1495f7e9b3c258ba0cc","slug":"一致性Hash","date":"2022-06-19T03:15:56.000Z","updated":"2022-06-19T13:44:46.114Z","comments":true,"path":"api/articles/一致性Hash.json","cover":[],"text":"背景跨一组节点分发数据的行为称为数据分区。当我们尝试分发数据时，有两个挑战： 我们如何知道特定数据将存储在哪个节点上？ 当我们添加或删除节点时，我们如何知道哪些数据将从现有节点移动到新节点？此外，当节点加入或离开时，我们如何最大限度地减少数据移动？ 一种简单的方法将使用适当的ha...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BloomFilters","uid":"1d4e4cde9c655456c3b6951c0ffa8502","slug":"BloomFilters","date":"2022-06-19T01:28:08.000Z","updated":"2022-06-19T03:05:08.210Z","comments":true,"path":"api/articles/BloomFilters.json","cover":[],"text":"背景如果我们在一组数据文件中存储了大量结构化数据(由记录ID标识)，那么知道哪个文件可能包含我们需要的数据的最有效方法是什么？我们不想读取每个文件，因为这样会很慢，而且我们必须从磁盘读取大量数据。一种解决方案是在每个数据文件上建立索引，并将其存储在单独的索引文件中。每个索引文件将...","link":"","photos":[],"count_time":{"symbolsCount":936,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"系统设计模式","slug":"系统设计模式","count":5,"path":"api/tags/系统设计模式.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"重新设计数据索引结构,缓存内存从2.3G降到了59MB","uid":"82b321e71a818dfcf2a53be9140d17a7","slug":"重新设计数据索引结构-缓存内存从2-3G降到了59MB","date":"2022-06-18T03:22:34.000Z","updated":"2022-06-18T07:52:13.740Z","comments":true,"path":"api/articles/重新设计数据索引结构-缓存内存从2-3G降到了59MB.json","cover":[],"text":"背景之前写过的文件缓存的设计，后来我发现还是有很多缺点的，比如说 实际索引结构内存占用也不小，而且只有hash索引和entity列索引，那么其他搜索场景，可能依然点需要通过顺序遍历的方式 另外搜索命中entity列索引的ID列表，有可能会分散在各个ID和offset映射的区间，为...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"工作","slug":"工作","count":2,"path":"api/tags/工作.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"BigDecimal类的四个常见陷阱以及如何避免它们","uid":"2e752d116822fcd8f3fa0fbea2092f6c","slug":"BigDecimal类的四个常见陷阱以及如何避免它们","date":"2022-06-11T02:14:48.000Z","updated":"2022-06-17T08:24:03.804Z","comments":true,"path":"api/articles/BigDecimal类的四个常见陷阱以及如何避免它们.json","cover":null,"text":"在Java中进行货币计算时，您可以使用java.math.BigDecimal–但要注意该类的一些独特挑战。 在使用Java进行商业计算时，尤其是对于货币，最好使用该类来避免与浮点算术相关的问题，如果使用两个基元类型之一：Float或Double(或它们的盒装类型对应类型)，则可...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"SpringBoot单测通过注解覆盖Spring配置","uid":"725e856f26b6befd144f449656c3dc6b","slug":"SpringBoot单测通过注解覆盖Spring配置","date":"2022-06-05T06:58:09.000Z","updated":"2022-06-17T08:24:56.933Z","comments":true,"path":"api/articles/SpringBoot单测通过注解覆盖Spring配置.json","cover":null,"text":"在我们写SpringBoot的单测的时候,有时候可能需要指定特殊的配置,用来覆盖原有的配置，以前的做法通常是2种 在IDEA的RUN&#x2F;DEBUG Configurations 弹窗上设置-D启动参数 在单测上人工写1个static 代码块，然后里面写System.set...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"SpringBoot","slug":"SpringBoot","count":2,"path":"api/tags/SpringBoot.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"文件缓存的设计","uid":"2d0169f6f2111380cc34e7095654794f","slug":"文件缓存的设计","date":"2022-06-05T06:55:29.000Z","updated":"2022-06-18T03:24:16.145Z","comments":true,"path":"api/articles/文件缓存的设计.json","cover":[],"text":"背景最近工作中需要做1个很有意思并且有一定挑战的事情，项目里有1个接口，如果是第一次查询，会一次性查整个表的所有数据，然后缓存在JVM内部，后续的搜索就都会查这个缓存，这个方案肯定是不合理的，但是未来也是有计划迁移到另外1个替代它的项目上，但是在迁移之前，领导叫我临时性的做下内存...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"Java","slug":"Java","count":5,"path":"api/tags/Java.json"},{"name":"工作","slug":"工作","count":2,"path":"api/tags/工作.json"}],"author":{"name":"李志博的博客","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"分享Java、中间件 等技术与学习笔记。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}